name: Reusable Deploy Workflow
on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
      service_name:
        required: true
        type: string
      service_version:
        required: true
        type: string
    secrets:
      GH_ACTIONS_PAT:
        required: true

jobs:
  critical-path-tests-uat:
    if: ${{inputs.environment_name == 'uat'}}
    runs-on: ubuntu-latest
    steps:
      - name: Run Critical Path Tests
        run: |
          echo "Running critical path tests for ${{ inputs.service_name }}"
          echo "Testing in: ${{ inputs.environment_name == 'test'}} environment"
          sleep 10
          # Uncomment to test failure scenario
          exit 1
          echo "Tests completed successfully"
          
  critical-path-tests-prod:
    if: ${{inputs.environment_name == 'prod'}}
    runs-on: ubuntu-latest
    steps:
      - name: Run Critical Path Tests
        run: |
          echo "Running critical path tests for ${{ inputs.service_name }}"
          echo "Testing in: ${{ inputs.environment_name == 'uat'}} environment"
          sleep 10
          # Uncomment to test failure scenario
          exit 1
          echo "Tests completed successfully"

  deploy:
    needs: 
      - critical-path-tests-prod
      - critical-path-tests-uat
    if: always() && (${{ inputs.service_name != 'cerbos' }}) && (
      (inputs.environment_name == 'dev' ||
      inputs.environment_name == 'test') ||
      (needs.critical-path-tests-uat.result == 'success' || needs.critical-path-tests-uat.result == 'skipped') &&
      (needs.critical-path-tests-prod.result == 'success' || needs.critical-path-tests-prod.result == 'skipped')
      )
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    concurrency: '${{ inputs.environment_name }}-${{ inputs.service_name }}'
    outputs:
      needs_testing: ${{ steps.check_test.outputs.needs_testing }}
    steps:
      - name: Check if testing needed
        id: check_test
        run: |
          if [[ "${{ inputs.service_name }}" != "router-api" ]]; then
            echo "needs_testing=true" >> $GITHUB_OUTPUT
          else
            echo "needs_testing=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Service
        run: |
          echo "Starting deployment of ${{ inputs.service_name }}"
          echo "Version: ${{ inputs.service_version }}"
          echo "Environment: ${{ inputs.environment_name }}"
          sleep 5
          echo "Deployment completed"

